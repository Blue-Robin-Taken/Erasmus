# Stubs for asyncpg.types (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from collections import namedtuple
from typing import Any, Optional, NamedTuple, Hashable, Sized, Sequence, Iterable
import builtins


class Type(NamedTuple):
    oid: int
    name: str
    kind: str
    schema: str


class Attribute(NamedTuple):
    name: str
    type: Type


ServerVersion = namedtuple('ServerVersion', ['major', 'minor', 'micro', 'releaselevel', 'serial'])

class Range(Hashable):
    def __init__(self, lower: Optional[Any] = ..., upper: Optional[Any] = ..., *, lower_inc: bool = ..., upper_inc: bool = ..., empty: bool = ...) -> None: ...
    @property
    def lower(self): ...
    @property
    def lower_inc(self): ...
    @property
    def lower_inf(self): ...
    @property
    def upper(self): ...
    @property
    def upper_inc(self): ...
    @property
    def upper_inf(self): ...
    @property
    def isempty(self) -> bool: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: Any) -> bool: ...

class BitString(Hashable, Sized):
    def __init__(self, bitstring: Optional[builtins.bytes] = ...) -> None: ...
    @classmethod
    def frombytes(cls, bytes_: Optional[builtins.bytes] = ..., bitlength: Optional[int] = ...): ...
    @property
    def bytes(self) -> builtins.bytes: ...
    def as_string(self) -> str: ...
    def __eq__(self, other: Any) -> bool: ...
    def __getitem__(self, i) -> builtins.bytes: ...

class Point(tuple):
    @property
    def x(self) -> float: ...
    @property
    def y(self) -> float: ...

class Box(tuple):
    def __new__(cls, high: Sequence[float], low: Sequence[float]): ...
    @property
    def high(self) -> Point: ...
    @property
    def low(self) -> Point: ...

class Line(tuple):
    def __new__(cls, A, B, C): ...
    @property
    def A(self): ...
    @property
    def B(self): ...
    @property
    def C(self): ...

class LineSegment(tuple):
    def __new__(cls, p1: Sequence[float], p2: Sequence[float]): ...
    @property
    def p1(self) -> Point: ...
    @property
    def p2(self) -> Point: ...

class Path(Hashable, Sized, Iterable[Point]):
    points: Any = ...
    def __init__(self, *points: Sequence[float], is_closed: bool = ...) -> None: ...
    @property
    def is_closed(self) -> bool: ...
    def __eq__(self, other: Any) -> bool: ...
    def __getitem__(self, i) -> Point: ...
    def __contains__(self, point: Any) -> bool: ...

class Polygon(Path):
    def __init__(self, *points: Sequence[float]) -> None: ...

class Circle(tuple):
    def __new__(cls, center, radius): ...
    @property
    def center(self): ...
    @property
    def radius(self): ...

# Names in __all__ with no definition:
#   Attribute
#   ServerVersion
#   Type
