from typing import Any, Iterable, Tuple, Generic, TypeVar, Optional, Hashable

PT = TypeVar('PT')


class _BasePermission(Generic[PT], Iterable[Tuple[str, PT]]):
    @property
    def create_instant_invite(self) -> PT: ...

    @create_instant_invite.setter
    def create_instant_invite(self, value: PT) -> None: ...

    @property
    def kick_members(self) -> PT: ...

    @kick_members.setter
    def kick_members(self, value: PT) -> None: ...

    @property
    def ban_members(self) -> PT: ...

    @ban_members.setter
    def ban_members(self, value: PT) -> None: ...

    @property
    def administrator(self) -> PT: ...

    @administrator.setter
    def administrator(self, value: PT) -> None: ...

    @property
    def manage_channels(self) -> PT: ...

    @manage_channels.setter
    def manage_channels(self, value: PT) -> None: ...

    @property
    def manage_guild(self) -> PT: ...

    @manage_guild.setter
    def manage_guild(self, value: PT) -> None: ...

    @property
    def add_reactions(self) -> PT: ...

    @add_reactions.setter
    def add_reactions(self, value: PT) -> None: ...

    @property
    def view_audit_log(self) -> PT: ...

    @view_audit_log.setter
    def view_audit_log(self, value: PT) -> None: ...

    @property
    def read_messages(self) -> PT: ...

    @read_messages.setter
    def read_messages(self, value: PT) -> None: ...

    @property
    def send_messages(self) -> PT: ...

    @send_messages.setter
    def send_messages(self, value: PT) -> None: ...

    @property
    def send_tts_messages(self) -> PT: ...

    @send_tts_messages.setter
    def send_tts_messages(self, value: PT) -> None: ...

    @property
    def manage_messages(self) -> PT: ...

    @manage_messages.setter
    def manage_messages(self, value: PT) -> None: ...

    @property
    def embed_links(self) -> PT: ...

    @embed_links.setter
    def embed_links(self, value: PT) -> None: ...

    @property
    def attach_files(self) -> PT: ...

    @attach_files.setter
    def attach_files(self, value: PT) -> None: ...

    @property
    def read_message_history(self) -> PT: ...

    @read_message_history.setter
    def read_message_history(self, value: PT) -> None: ...

    @property
    def mention_everyone(self) -> PT: ...

    @mention_everyone.setter
    def mention_everyone(self, value: PT) -> None: ...

    @property
    def external_emojis(self) -> PT: ...

    @external_emojis.setter
    def external_emojis(self, value: PT) -> None: ...

    @property
    def connect(self) -> PT: ...

    @connect.setter
    def connect(self, value: PT) -> None: ...

    @property
    def speak(self) -> PT: ...

    @speak.setter
    def speak(self, value: PT) -> None: ...

    @property
    def mute_members(self) -> PT: ...

    @mute_members.setter
    def mute_members(self, value: PT) -> None: ...

    @property
    def deafen_members(self) -> PT: ...

    @deafen_members.setter
    def deafen_members(self, value: PT) -> None: ...

    @property
    def move_members(self) -> PT: ...

    @move_members.setter
    def move_members(self, value: PT) -> None: ...

    @property
    def use_voice_activation(self) -> PT: ...

    @use_voice_activation.setter
    def use_voice_activation(self, value: PT) -> None: ...

    @property
    def change_nickname(self) -> PT: ...

    @change_nickname.setter
    def change_nickname(self, value: PT) -> None: ...

    @property
    def manage_nickname(self) -> PT: ...

    @manage_nickname.setter
    def manage_nickname(self, value: PT) -> None: ...

    @property
    def manage_roles(self) -> PT: ...

    @manage_roles.setter
    def manage_roles(self, value: PT) -> None: ...

    @property
    def manage_webhooks(self) -> PT: ...

    @manage_webhooks.setter
    def manage_webhooks(self, value: PT) -> None: ...

    @property
    def manage_emojis(self) -> PT: ...

    @manage_emojis.setter
    def manage_emojis(self, value: PT) -> None: ...


class Permissions(_BasePermission[bool], Hashable):
    def __init__(self, permissions: int = 0) -> None: ...

    def __eq__(self, other: Any) -> bool: ...

    def __ne__(self, other: Any) -> bool: ...

    def __le__(self, other: Any) -> bool: ...

    def __ge__(self, other: Any) -> bool: ...

    def __lt__(self, other: Any) -> bool: ...

    def __gt__(self, other: Any) -> bool: ...

    def is_subset(self, other: Any) -> bool: ...

    def is_superset(self, other: Any) -> bool: ...

    def is_strict_subset(self, other: Any) -> bool: ...

    def is_strict_superset(self, other: Any) -> bool: ...

    @classmethod
    def none(cls) -> 'Permissions': ...

    @classmethod
    def all(cls) -> 'Permissions': ...

    @classmethod
    def all_channel(cls) -> 'Permissions': ...

    @classmethod
    def general(cls) -> 'Permissions': ...

    @classmethod
    def text(cls) -> 'Permissions': ...

    @classmethod
    def voice(cls) -> 'Permissions': ...

    def update(self, **kwargs) -> None: ...


class PermissionOverwrite(_BasePermission[Optional[bool]]):
    def __init__(self, **kwargs) -> None: ...

    def pair(self) -> Tuple[Permissions, Permissions]: ...

    @classmethod
    def from_pair(cls, allow: Permissions, deny: Permissions) -> 'PermissionOverwrite': ...

    def is_empty(self) -> bool: ...

    def update(self, **kwargs) -> None: ...
